'use strict';

let { execute, getClient, stringify } = require( '../index' )

const urlToConnect = 'http://10.6.12.86:9308'

var json =  {
    "locations": [
        {
          "name": "location1",
          "lat": 23.000000,
          "long": 46.500000,
          "stock": 30
        },
        {
          "name": "location2",
          "lat": 24.000000,
          "long": 47.500000,
          "stock": 20
        },
        {
          "name": "location3",
          "lat": 24.500000,
          "long": 47.500000,
          "stock": 10
        }
      ],
      "color": [
        "blue",
        "black",
        "yellow"
      ],
      "price": 210.00,
      "cpu": {
        "model": "Kyro 345",
        "cores": 8,
        "chipset": "snapdragon 845"
      },
    "memory": 128,
    "service": {
     "scraper": {
      "message": {
       "text": "  –ê–∫—Ü–∏–∏ –î–í–ú–ü (FESH) –º–æ–≥—É—Ç –≤—ã—Ä–∞—Å—Ç–∏ –≤ 3 —Ä–∞–∑–∞. –î–∞–∂–µ –ø—Ä–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ 30-40%, —á—Ç–æ –æ—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ –¥–ª—è –î–í–ú–ü, –∞–∫—Ü–∏—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ –º–æ–¥–µ–ª–∏ DCF –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –†–î–í) –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–∞ –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞.–ü–æ –º–Ω–µ–Ω–∏—é —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ª–∏ –†–î–í, –≤ —Å–≤—è–∑–∏ —Å —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π –≤ –º–∏—Ä–µ, –±–∏–∑–Ω–µ—Å –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 100%, —á—Ç–æ –≤ 2.5 —Ä–∞–∑–∞ –≤—ã—à–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. –í –±—É–¥—É—â–µ–º –¥–ª—è –∞–∫—Ü–∏–π –î–í–ú–ü —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∫—Ä–∞—Ç–Ω—ã–π —Ä–æ—Å—Ç.  –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–π –î–í–ú–ü (FESH) 97 —Ä—É–±–ª–µ–π, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ +180%.#FESH@AK47pfl",
       "html": "<div class=\"tgme_widget_message_text js-message_text\" dir=\"auto\"><i class=\"emoji\" style=\"background-image:url('//telegram.org/img/emoji/40/E29AA1.png')\"><b>‚ö°Ô∏è</b></i> <b>–ê–∫—Ü–∏–∏ –î–í–ú–ü (<a href=\"https://putinomics.ru/dashboard/FESH/MOEX\" target=\"_blank\" rel=\"noopener\" onclick=\"return confirm('Open this link?\\n\\n'+this.href);\">FESH</a>) –º–æ–≥—É—Ç –≤—ã—Ä–∞—Å—Ç–∏ –≤ 3 —Ä–∞–∑–∞.</b> –î–∞–∂–µ –ø—Ä–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ 30-40%, —á—Ç–æ –æ—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ –¥–ª—è –î–í–ú–ü, –∞–∫—Ü–∏—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ –º–æ–¥–µ–ª–∏ DCF –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –†–î–í) –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–∞ –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞.<br><br>–ü–æ –º–Ω–µ–Ω–∏—é —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏–ª–∏ –†–î–í, –≤ —Å–≤—è–∑–∏ —Å —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π –≤ –º–∏—Ä–µ, <b>–±–∏–∑–Ω–µ—Å –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 100%</b>, —á—Ç–æ –≤ 2.5 —Ä–∞–∑–∞ –≤—ã—à–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. <b>–í –±—É–¥—É—â–µ–º –¥–ª—è –∞–∫—Ü–∏–π –î–í–ú–ü —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∫—Ä–∞—Ç–Ω—ã–π —Ä–æ—Å—Ç.</b><br><br><i class=\"emoji\" style=\"background-image:url('//telegram.org/img/emoji/40/F09F9189.png')\"><b>üëâ</b></i> <a href=\"https://putinomics.ru/dashboard/FESH/MOEX\" target=\"_blank\" rel=\"noopener\" onclick=\"return confirm('Open this link?\\n\\n'+this.href);\">–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–π –î–í–ú–ü (FESH) 97 —Ä—É–±–ª–µ–π, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ +180%.</a><br><br><a href=\"?q=%23FESH\">#FESH</a><br><a href=\"https://t.me/AK47pfl\" target=\"_blank\">@AK47pfl</a></div>",
       "publishedAt": "2022-04-14 11:43:23",
       "index": 3,
       "md5": "b2e975d85ab64e16039c16506dfda01a"
      },
      "page": {
       "title": "–†—ã–Ω–∫–∏–î–µ–Ω—å–≥–∏–í–ª–∞—Å—Ç—å | –†–î–í",
       "description": "<div class=\"tgme_channel_info_description\"><i class=\"emoji\" style=\"background-image:url('//telegram.org/img/emoji/40/F09F949D.png')\"><b>üîù</b></i> –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É —Ä—ã–Ω–∫—É —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–Ω–µ–µ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —ç–ª–∏—Ç–∞–º. –í–ø–µ—Ä–µ–¥–∏ –±—Ä–æ–∫–µ—Ä–æ–≤ –∏ –±–∞–Ω–∫–æ–≤.<br><br>–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: <a href=\"https://t.me/dragonwoo\" target=\"_blank\">@dragonwoo</a><br><br>–†–µ–∫–ª–∞–º–∞ - –∞–≥–µ–Ω—Ç PR Fintech: <a href=\"https://t.me/arina_promo\" target=\"_blank\">@arina_promo</a><br><br>–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ <a href=\"https://t.me/RDVPREMIUMbot\" target=\"_blank\">@RDVPREMIUMbot</a></div>",
       "image": "https://cdn4.telegram-cdn.org/file/X3RZTkJ6BTu6VcpAiW3OCGxjezSTNGTyuW6BsBFNFsakzKUZyPc1c-RWWWdUic7HIDYiT5ygx44S6tAjy7L2GeNw3egyZtvz0FKkCagmo2mf3B4VZKvJ1mUVaKDiiaPwcA1xTKbxCeRfRGjmzLSesiRxu-gVrLnzD7oZ62tXaKDqaqLcw_dazSi_6rFjUnQRKoIJ2LPdPwjlHiR8cqN7VnD4RbGlNEf6h39my38JIFcdO_F28pO4_c3uds5eJVfqv3fM6WaOFonRaR3QnopWKTnU8jJTa6Vc9NfGxp9-F9MnqXYhwES98VpwgFudCUS60MrcMQSXBxS_IQOfQh_eAg.jpg"
      }
     },
     "scheduler": {
      "task": {
       "params": {
        "type": "telegram",
        "channel": "AK47pfl"
       },
       "state": "processed",
       "processedAt": "2022-04-15 17:38:29"
      }
     }
    }
   }
var created_at = '2022-08-26T13:02:16+00:00'
var text = 'location2 test 123456789 —Ç—Ä–∏–º–∞—é—Ç—å –æ–±–æ—Ä–æ–Ω—É'
json.service.scraper.message.html = json.service.scraper.message.html.replaceAll( /\"/ig, '&quot')
json.service.scraper.page.description = json.service.scraper.page.description.replaceAll( /\"/ig, '&quot')
const jsont_to_text = stringify(json)

describe('–¢–µ—Å—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ manticoreSearch', () => {

    describe('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Ä–æ–±–æ—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', function() {
        //table molfar (id, text, data , created_at )
        //              uint, string, json, long
        let max_id = 1

        test('Max id –≤ –±–∞–∑—ñ', async () => {
            const response = await execute(
                "select max(id) as max_id from molfar;",
                urlToConnect
            )
            if(response[0]['data'][0] != undefined && response[0]['data'][0]['max_id'] != undefined){
                max_id = response[0]['data'][0]['max_id'] + 1
            }
            expect(max_id).toBeGreaterThan(0)
        });
        
        test('–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö', async () => {
            let data = `insert into molfar values(${max_id}, '${text}', ${new Date(created_at).getTime()}, ${jsont_to_text});`
            const response = await execute(
                data,
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });

        test('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–æ–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0', async () => {
            const response = await execute(
                `select * from molfar ${max_id}`,
                urlToConnect
            )
            console.log(response[0]['data'][0])
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });
        
        test('–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫ –ø–æ –ø–æ–ª—é text', async () => {
            const response = await execute(
                "select * from molfar where MATCH('location2');",
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });

        test('–ü–æ—à—É–∫ –ø–æ –ø–æ–ª—é data —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ json', async () => {
            const response = await execute(
                "SELECT * FROM molfar WHERE data.cpu.model='Kyro 345';",
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });
        // for example
        //SELECT * FROM molfar WHERE data.color IS NULL;
        test('–ü–æ—à—É–∫ –ø–æ –ø–æ–ª—é data —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ json', async () => {
            const response = await execute(
                "SELECT * FROM molfar WHERE data.color IS NOT NULL;",
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });

        //SELECT *,IN(data.color,'black','white') AS color_filter FROM molfar WHERE color_filter=1; —Ü–µ —î, —è–∫—â–æ 0 -= —Ç–æ –Ω–µ–º–∞—î
        test('–ü–æ—à—É–∫ –ø–æ –ø–æ–ª—é data —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ json', async () => {
            const response = await execute(
                "SELECT *,IN(data.color,'black','white') AS color_filter FROM molfar WHERE color_filter=1;",
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });

        // SELECT * from molfar ORDER BY INTEGER(data.video_rec[0]) DESC;
        test('–ü–æ—à—É–∫ –ø–æ –ø–æ–ª—é data —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ json', async () => {
            const response = await execute(
                "SELECT * from molfar ORDER BY INTEGER(data.video_rec[0]) DESC;",
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });

        test('–ü–æ—à—É–∫ –ø–æ –ø–æ–ª—é data —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ json', async () => {
            const response = await execute(
                "SELECT data.video_rec[0] as g, count(*) from molfar GROUP BY g;",
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });


        test('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–æ–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0', async () => {
            const response = await execute(
                `select * from molfar ${max_id}`,
                urlToConnect
            )
            console.log(response[0]['data'][0])
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });

        test('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–µ Data –≤ –∑–∞–ø–∏—Ç—ñ', async () => {
            const response = await execute(
                'select * from molfar',
                urlToConnect
            )
            expect(response[0]['data'][0]['text'].length).toBeGreaterThan(0)
        });

        test('–ü–æ–≤–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫', async () => {
            const response = await execute(
                "select * from molfar where match('—Ç—Ä–∏–º–∞—é—Ç—å –æ–±–æ—Ä–æ–Ω—É')",
                urlToConnect
            )
            const count = response[0]['total']
            expect(count).toBeGreaterThan(0)
        });
        
         test('–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', async () => {
             const response = await execute(
                 `delete from molfar where id = ${max_id};`,
                 urlToConnect
             )
             const count = response[0]['total']
             expect(count).toBeGreaterThan(0)
         });
    });
    
});